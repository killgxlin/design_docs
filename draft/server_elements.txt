网络消息处理

数据同步机制
    类似于bw里面的属性
    修改一个值同步到数据库或缓冲
    修改一个值，同步到客户端

date time
    日期时间间隔使用是否方便

data save
    数据如何保存
    既能满足内存的需求，又不会使数据库访问太频繁
    定期保存离线的玩家，并释放
    分离玩家的战斗模块

database failure
    数据库操作队列，若断链，则不向队列中插入数据，等连接上之后再重新插入
    数据库失败该怎么处理，断连，超时

offline affair
    离线玩家时效事务的处理，比如说buffer到期
    存到期时间
    事件发生的时候处理，比如说玩家登录

global data
    排行榜数据怎么处理，各项排名什么的

轮训机制
    每个tick每个玩家都要遍历，这样有点浪费，为什么不做成事件机制

消息类型抽象
    request response
    notify

配置文件
    动态加载
    数据表格xml读取机制
    配置文件json读取机制

防止多次进行统一事务
    玩家登陆时的多次读取

离线玩家的数据该怎么处理，那种通过玩家id的到名字等级之类的数据

压力测试机器人
    不仅仅用来压测，也可以用于平时的单元测试，用机器人测所有功能
    这需要每个操作都有返回，还需要把数据层封装的比较好，这样也有利于机器人和客户端的代码重用
    类似于把模型层写得很完备

MVC之M
    protobuf,client model, server model结合起来，有利于代码的重复使用和机器人测试。
    
宕机处理
    如何能保证玩家身上的数据和全局数据的一致

测试机制
    代码覆盖
    机器人单元测试

统一的定时机制
    比如说玩家身上有每日清零的数据
    玩家上线时执行的操作

存在玩家身上的
    只和玩家自己有关
    只有玩家在线的时候才有效

存在全局中的
    可以被离线更新
    不随着玩家离线而释放
    可能会被其他模块或玩家用到

登录验证机制
    登录服务器负责验证，之后发送通知给游戏服务器
    游戏服务器接收登录服务器的通知，并设置超时，等待客户端连接
    客户端从登录服务器收到游戏服务器地址，然后连接游戏服务器

数据流加密与压缩
    用一般的算法就可以了，参考画皮2

billing
    根据网站接口来给游戏服务器划拨元宝
    步骤
        网站写数据库标记billing帐号并发送给billing
        billing置正在billing并发送给game
        game置billing好

监控
    分布式日志记录，所有机器的游戏内日志都记录在此

版本控制
    在运营阶段，如果数据库的格式变了，那么在玩家登陆的时候就得根据记录的版本号来读取之前的版本，最终存储的时候写成最新版本
