network
    connection
        ClientConnection
            on_connect
            on_err
            on_close
            on_msg
            
        ServerConnection
            on_connect
            on_err
            on_close
            on_msg

    client
        IO io
        Connector connector(io)
        Connection conn

        while (true) {
            // some logic

            // ...
            if (need_connect) {
                conn = connector.connect<ClientConnection>(ip, port)
            }
            // ...

            // if connected
            if (conn.is_ready()) {
                packet = conn.get()
                conn.send(packet)

                packet = conn.recv()
                if (packet) {
                    // deal packet
                    // ...
                    conn.return(packet)
                }

                if (need_disconnect) {
                    conn.close()
                }

            }
            
            io.run_once()
        }

    server
        IO io
        Accepter accepter(io)
        accepter.start(ip, port)
        conn = accepter.accept()

        conn.onclose= function() {}
        conn.onerr = function() {}

        packet = conn.recv()
        conn.return(packet)

        packet = conn.get()
        conn.send(packet)

        accepter.finish()
    
        while (true) {
            
        }
db
    db.init(ip, port)

    Find find;
    find.key = "lalala"
    find.deal_one = function(data){
        print(data)
    }
    find.done = function(err){
        print(err)
    }
    db.execute(find)

    Update update
    update.key = "lalala"
    update.content = "{}";
    update.done = function(err){
        print(err)
    }
    
    db.post(update)

    Remove remove;
    remove.key = "lalala"
    remove.done = function(err){
        print(err)
    }

    db.post(remove)

    db.destroy()
    
res
    json
        数组

    xml
        范围索引
        id索引

        xml.init()
        auto proto = xml.proto(id)
        xml.destroy()

datetime
    auto now = timer.now()
    auto expire = timer.date(2013,3,54,12,23)
    auto interval = now - expire
    if (interval.pos) {
    } else {
    }

    auto cooldown = timer.interval(50)
    cooldown -= timer.last_inter()
    if (cooldown < 0) {
    }


