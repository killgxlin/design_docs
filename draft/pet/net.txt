typedef std::vector<uint8_t> msg_t;
typedef std::shared_ptr<msg_t> spmsg_t;
typedef std::list<spmsg_t> msg_queue_t;

struct transport_t {
    bool connected;
    bool connecting;
    bool disconnecting;

    msg_queue_t send_queue;
    msg_queue_t recv_queue;

    socket_t socket;
    std::thread td_conn;
    std::thread td_send;
    std::thread td_recv;

    string ip;
    uint16_t port;

    bool init(const string &ip_, const uint16_t port_);
    void destroy();

    void try_connect() {
        if (!connecting.compare_exchange_strong(false, true))
            return;

        td_conn = std::thread(std::bind(fun_conn, this));
        td_conn.detach();
    }

    void fun_conn() {
        socket = socket();
        while (true) {
            if (0 == connect(socket, ip, port)) {
                connected = true;
                break;
            } else {
                switch (errno) {
                    case retry:
                        continue;
                        break;
                    case fin:
                        connected = false;
                        break;
                }
            }
        }
        connecting = false;
        if (connected) {
            td_send = std::thread(std::bind(fun_send, this));
            td_recv = std::thread(std::bind(fun_recv, this));
        } else {
            closesocket(socket);
        }
    }

    void fun_send() {
        while (connected) {
            spmsg_t msg;
            if (!send_queue.pop(msg))
                sleep(10);

            send(socket, msg.data(), msg.len());
        }
    }

    void fun_recv() {
        while (connected) {
            uint32_t msg_len = 0;
            recv(socket, &msg_len, 4);

            spmsg_t msg = boost::make_shared<msg_g>(msg_len + 4);
            *(uint32_t*)msg->data() = msg_len;
            recv(socket, &msg->data()+4, msg_len);

            recv_queue.push(msg);
        }
    }
    
    bool is_connected() {
        return connected;
    }

    bool is_connecting() {
        return connecting; 
    }

    void disconnect() {
        connected = false;

        td_send.join();
        td_recv.join();

        shutdown(socket);
        close(socket);
    }

    bool send(spmsg_t msg_) {
        return send_queue.push(msg_);
    }
    spmsg_t recv() {
        return recv_queue.pop();
    }

    void close();
};

int main() {
    transport_t trans;
    trans.init("127.0.0.1", 999);
    do {
        if (!trans.is_connecting())
            trans.try_connect();
    } (!trans.is_connected());

    spmsg_t msg = trans.alloc_msg(3);
    msg.len = 3;
    msg.data = [0,1,2];
    trans.send(data);

    uint32_t len = rand() % 100;
    spmsg_t msg = trans.alloc_msg(len);
    msg.len = len;
    msg.data = [0,1,2];
    trans.send(data);

    while (trans.is_connected()) {
        spmsg_t msg = trans.recv();
        if (msg) {
            trans.send(msg);
        }
        sleep(100);
    }

    trans.destroy();
}
