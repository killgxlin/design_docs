
#include <stdint.h>
#include <list>
#include <vector>
#include <map>
#include <functional>

#include <boost/smart_ptr.hpp>
#include <boost/asio.hpp>
#include <boost/thread.hpp>

using namespace std;
using namespace boost::asio;

typedef vector<uint8_t> msg_t;
typedef boost::shared_ptr<msg_t> pmsg_t;

struct session_t {
    int32_t status;    // 未验证，正常，待关闭，已关闭

    ip::tcp::socket socket;
    list<pmsg_t> recv_queue;
    list<pmsg_t> send_queue;
};

typedef boost::shared_ptr<session_t> psession_t;

struct network_t {
    boost::thread_group thread_group;
    io_service io_service;

    list<pair<psession_t, uint64_t>> to_authorize;
    map<uint64_t, psession_t> authorized;
    list<psession_t> to_destroy;

    // destroy thread
    // send thread
    // work thread
    // authorize thread
} gn;

struct client_handler_t {
    uint64_t sessionid;
};

typedef boost::shared_ptr<client_handler_t> pclient_handler_t;

struct client_handler_manager_t {
    map<uint64_t, pclient_handler_t> handlers;
} gchm;

bool test_asio3() {

    gn.init();

    auto acceptor = gn.start_acceptor("localhost", 999, [](uint64_t sessionid_)->bool{
        gchm.handlers[sessionid_] = pclient_handler_t(new client_handler_t());
        return true;
    });

    while (true) {

        
        gn.start_send();
    }

    gn.stop_acceptor(acceptor);

    gn.destroy();

    return true;
}

