// pseudo ------------------------------------------------------------------------------------------------
struct player_t {
    uint32_t src_sceneid;
    pair<int32_t, int32_t> src_pos;

    uint32_t sceneid;
    void on_logon() {
        gsm.on_logon(this);   
    }
};

struct guild_t {
    uint32_t id;

    bool is_member_can_enter_guildkill();
    void set_member_in_guildkill();
    void set_member_quit_guildkill();

};

struct guild_mgr_t {
    guild_t* get_opposite(guild_t* guild_);
} ggm;

struct instance_t {
    uint32_t id;
    list<session_t> player;
};

struct guildkill_instance_t : public instance_t {
    uint64_t guildid;
};

struct guildwar_instance_t : public instance_t {
    uint64_t guildid1;
    uint64_t guildid2;
};

struct scene_t {
    int32_t type; // normal, gw, gk
    map<uint32_t, instance_t*> instance;
    map<uint64_t, uint32_t> idmap;

    void update();

    uint32_t prepare_enter(player_t* player_); 
    void add(player_t* player_, uint32_t instanceid_) {
        // 添加到副本，并且同步
    }
    void remove(player_t* player_);
};

struct normal_scene_t : public scene_t {
    uint32_t prepare_enter(player_t* player_) {
        auto instance = find_scene_with_min_member_num;
        if (instance->num() >= 50) {
            intance = create_instance;
        }

        return instanceid;
    }
    void add(player_t* player_, uint32_t instanceid_) {
        scene_t::add(player_, instanceid_);
    }
    void remove(player_t* player_);
};

struct guildwar_scene_t : public scene_t {
    uint32_t prepare_enter(player_t* player_) {
        auto* guild = player_->get_guild();
        if (!guild)
            return -1;

        if (guild->can_enter_guildkill(player_))
            return -1;
        
        uint32_t instanceid = idmap[guild->id];
        if (instanceid == -1) {
            auto opposite = ggm.get_opposite(guild);
            if (!opposite)
                return -1;

            static uint32_t new_id = 0;
            instanceid = new_id++
            auto new_instance = new instance_t(instanceid);
            instance[instanceid] = new_instance;
            idmap[guild->id] = instanceid;
            idmap[opposite->id] = instanceid;
        }
        guild_ware_instance_t* inst = instance[instanceid];

        return instanceid;
    }
    void update() {
    }
    void add(player_t* player_, uint32_t instanceid_) {
        scene_t::add(player_, instanceid_);
        同步老玩家
        同步新玩家
    }
    void remove(player_t* player_);
};

struct guildkill_scene_t : public scene_t {
    uint32_t prepare_enter(player_t* player_) {
        auto* guild = player_->get_guild();
        if (!guild)
            return -1;

        if (guild->can_enter_guildkill(player_))
            return -1;

        uint32_t instanceid = idmap[guild->id];
        if (instanceid == -1) {
            
            static uint32_t new_id = 0;
            instanceid = new_id++;
            auto new_instance = new instance_t(instanceid);
            instance[instanceid] = new_instance;
            idmap[guild->id] = instanceid;
        }

        return instanceid;
    }
    void add(player_t* player_, uint32_t instanceid_);
    void remove(player_t* player_);
};

struct session_t {
    player_t* player;
};

struct scene_mgr_t {
    void add_player_session(session_t* session_) {
        auto player = session_->player();
        auto dst_scene = scene[player->sceneid];

        if (!dst_scene)
            return;

        dst_scene->add(session_);
    }

    void remove_player_session(session_t* session_) {
        auto player = session_->player();
        auto src_scene = scene[player->sceneid];

        if (!src_scene)
            return;

        src_scene->remove(session_);
    }

    void change_scene(session_t* session_, uint32_t dst_sceneid_) {
        scene_t* dst_scene = scene[dst_sceneid_];
        player_t* player = session_->player();

        if (!dst_scene->prepare_enter(player))
            return;

        remove_player_session(session_);
        player->sceneid = dst_sceneid_;
        add_player_session(session_);
    }

    void on_logon(player_t* player_) {
        scene_t* dst_scene = find_current_scene();
        uint32_t instanceid = dst_scene->prepare_enter(player_);
        if (instanceid == -1) {
            dst_scene = get_enter_pos_and_sceneid();
            instanceid = dst_scene->prepare_enter(player_);
            player_->sceneid = dst_scene->id;
        }

        add_player_to_scene();
    }

    void on_logoff(player_t* player_) {
        remove_player_session(player_);
    }

    map<uint32_t, scene_t*> scene;
} gsm;



// msg -----------------------------------------------------------------------------------------------------------
帮派杀
    request
        发起帮派杀
        参与战斗
        触发战斗
            index
        花钱复活
        离开场景

    notify
        发起帮派杀
        战斗结果
            combat
        主公生命
            int32_t
        怪物刷新
            born
                index
            dead
                index
            modify
                {index:hp}
        玩家状态
            born
                playerid
            dead
                playerid
            modify
                {playerid:hp}
        结束
            win

        
帮派战
    request
        参与战斗
        离开场景
        花钱复活
        触发战斗
            playerid

    notify
        开启
        战斗结果
            combat
        玩家状态
            born
                playerid
            dead
                playerid
            modify
                {playerid:hp}

        结束
            win

